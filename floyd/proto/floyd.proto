package floyd;

enum Type {
  // User cmd
  kRead = 0;
  kWrite = 1;
  kDirtyWrite = 2;
  kDelete = 3;

  // Raft RPC
  kRequestVote = 8;
  kAppendEntries = 9;
  kServerStatus = 10;
  kAddServer = 11;
}


message Entry {
  enum OpType {
    kRead = 0;
    kWrite = 1;
    kDelete = 2;
  }
  required uint64 term = 1;
  required string key = 2;
  optional bytes value = 3;
  required OpType optype = 4;
}

message CmdRequest {
  required Type type = 1;

  message Kv {
    required bytes key = 1;
    optional bytes value = 2;
  }
  optional Kv kv = 2;

  message User {
    required bytes ip = 1;
    required int32 port = 2;
  }
  optional User user = 3;

  message RequestVote {
    required uint64 term = 1;
    required bytes ip = 2;
    required int32 port = 3;
    required uint64 last_log_index = 4;
    required uint64 last_log_term = 5;
  }
  optional RequestVote request_vote = 4;

  message AppendEntries {
    required uint64 term = 1;
    required bytes ip = 2;
    required int32 port = 3;
    required uint64 prev_log_index = 4;
    required uint64 prev_log_term = 5;
    required uint64 leader_commit = 6;
    repeated Entry entries = 7;
  }
  optional AppendEntries append_entries = 5;

  message ServerStatus {
    required int64 term = 1;
    required int64 commit_index = 2;
    optional bytes ip = 3;
    optional int32 port = 4;
  }
  optional ServerStatus server_status = 6;
  message AddServer {
    required bytes new_server_ip = 1;
    required int32 new_server_port = 2;
  }
  optional AddServer add_server = 7;
}

enum StatusCode {
  kOk = 0;
  kNotFound = 1;
  kError = 2;
}

message CmdResponse {
  required Type type = 1;
  optional StatusCode code = 2;
  message Kv {
    optional bytes value = 1;
  }
  optional Kv kv = 4;

  message RequestVoteResponse {
    required uint64 term = 1;
    required bool vote_granted = 2;
  }
  optional RequestVoteResponse request_vote_res = 6;

  message AppendEntriesResponse {
    required uint64 term = 1;
    required bool success = 2;
    optional uint64 last_log_index = 3;
  }
  optional AppendEntriesResponse append_entries_res = 7;

  message ServerStatus {
    required uint64 term = 1;
    required uint64 commit_index = 2;
    required bytes role = 3;
    optional bytes leader_ip = 4;
    optional int32 leader_port = 5;
    optional bytes voted_for_ip = 6;
    optional int32 voted_for_port = 7;
    optional uint64 last_log_term = 8;
    optional uint64 last_log_index = 9;
    optional uint64 last_applied = 10;
  }
  optional ServerStatus server_status = 8;

  message AddServerResponse {
    required int32 status = 1;
    required bytes leader_hint_ip = 2;
    required bytes leader_hint_port = 3;
  }
  optional AddServerResponse add_server_res = 9;
}
